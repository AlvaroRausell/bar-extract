

name: Create release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:

  build:
    name: Build and Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - name: Build
        run: |
          go build -v -o bar-extract-${{ matrix.os }} main.go
      - name: Test
        run: |
          go test -v ./...
      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: bar-extract-${{ matrix.os }}
          path: bar-extract-${{ matrix.os }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Fetch tags
        run: git fetch --tags
      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
      - name: Calculate next minor version
        id: bump_minor
        run: |
          latest_tag="${{ steps.get_tag.outputs.latest_tag }}"
          if [ -z "$latest_tag" ]; then
            next_tag="v0.1.0"
          else
            IFS='.' read -r major minor patch <<< "${latest_tag#v}"
            minor=$((minor+1))
            next_tag="v${major}.${minor}.0"
          fi
          echo "next_tag=$next_tag" >> $GITHUB_OUTPUT
      - name: Create and push tag
        env:
          NEXT_TAG: ${{ steps.bump_minor.outputs.next_tag }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag "$NEXT_TAG"
          git push origin "$NEXT_TAG"
      - name: List downloaded files
        run: ls -lh ./dist
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir ./output/
          find ./dist -type f -name 'bar-extract-*' -exec cp {} ./output/ \;
          ls -lh ./output
          gh release create "${{ steps.bump_minor.outputs.next_tag }}" ./output/bar-extract-* --generate-notes



